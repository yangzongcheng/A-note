聚簇索引是物理索引，数据表就是按顺序存储的，物理上是连续的。
一旦创建了聚簇索引，表中的所有列都根据构造聚簇索引的关键列来存储


innodb的次索引指向对主键的引用  (聚簇索引)

myisam的次索引和主索引   都指向物理行 (非聚簇索引)

聚簇索引是对磁盘上实际数据重新组织以按指定的一个或多个列的值排序的算法。特点是存储数据的顺序和索引顺序一致。
一般情况下主键会默认创建聚簇索引，且一张表只允许存在一个聚簇索引


注意: innodb来说,

　　1: 主键索引 既存储索引值,又在叶子中存储行的数据

　　2: 如果没有主键, 则会Unique key做主键

　　3: 如果没有unique,则系统生成一个内部的rowid做主键.

　　4: 像innodb中,主键的索引结构中,既存储了主键值,又存储了行数据,这种结构称为”聚簇索引”





1、聚簇索引
a) 一个索引项直接对应实际数据记录的存储页，可谓“直达”
b) 主键缺省使用它
c) 索引项的排序和数据行的存储排序完全一致，利用这一点，想修改数据的存储顺序，可以通过改变主键的方法（撤销原有主键，另找也能满足主键要求的一个字段或一组字段，重建主键）
d) 一个表只能有一个聚簇索引（理由：数据一旦存储，顺序只能有一种）

2、非聚簇索引
a) 不能“直达”，可能链式地访问多级页表后，才能定位到数据页
b) 一个表可以有多个非聚簇索引

-------------------------------------聚簇索引优势劣势；-----------------------------------

　　优势: 根据主键查询条目比较少时,不用回行(数据就在主键节点下)

　　劣势: 如果碰到不规则数据插入时,造成频繁的页分裂.