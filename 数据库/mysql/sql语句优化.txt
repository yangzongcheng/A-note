1、尽量避免使用select *，返回无用的字段会降低查询效率。如下：
      SELECT * FROM t
      优化方式：使用具体的字段代替*，只返回使用到的字段。

2、对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。


3、尽量避免进行null值的判断，会导致数据库引擎放弃索引进行全表扫描。尽量避免null字段，定义时尽量使用   not null.原因是允许null时不方便查询优化，复合索引也会失效，而且如果列有索引时会额外占用空间： a int(10) NOT NULL DEFAULT 0   如下：

     SELECT * FROM t WHERE score IS NULL

     优化方式：可以给字段添加默认值0，对0值进行判断。如下：

     SELECT * FROM t WHERE score = 0


4、应尽量避免在where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。



5、应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描。如下：

     SELECT * FROM t WHERE id = 1 OR id = 3

     优化方式：可以用union代替or。如下：

     SELECT * FROM t WHERE id = 1
     UNION
     SELECT * FROM t WHERE id = 3

   （PS：如果or两边的字段是同一个，如例子中这样。貌似两种方式效率差不多，即使union扫描的是索引，or扫描的是全表）


6、尽量避免使用in 和not in，会导致数据库引擎放弃索引进行全表扫描。如下：

        SELECT * FROM t WHERE id IN (2,3)

       SELECT * FROM t1 WHERE username IN (SELECT username FROM t2)

       优化方式：如果是连续数值，可以用between代替。如下：

       SELECT * FROM t WHERE id BETWEEN 2 AND 3

       如果是子查询，可以用exists代替。如下：

       SELECT * FROM t1 WHERE EXISTS (SELECT * FROM t2 WHERE t1.username = t2.username)




7、尽量避免在字段开头模糊查询，会导致数据库引擎放弃索引进行全表扫描。如下：

     SELECT * FROM t WHERE username LIKE '%li%'

    优化方式：尽量在字段后面使用模糊查询。如下：

    SELECT * FROM t WHERE username LIKE 'li%'

8、尽量避免在where条件中等号的左侧进行表达式、函数操作，会导致数据库引擎放弃索引进行全表扫描。如下：

       SELECT * FROM t2 WHERE score/10 = 9

       SELECT * FROM t2 WHERE SUBSTR(username,1,2) = 'li'

       优化方式：可以将表达式、函数操作移动到等号右侧。如下：

      SELECT * FROM t2 WHERE score = 10*9

      SELECT * FROM t2 WHERE username LIKE 'li%'


9、应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。

     如：select id from t where substring(name,1,3)='abc'

    --name以abc开头的id应改为:select id from t where name like 'abc%'



 10、很多时候用 exists 代替 in 是一个好的选择：

      select num from a where num in(select num from b)

     优化方式：select num from a where exists(select 1 from b where num=a.num)




11、尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。






