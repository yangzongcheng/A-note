Lua 嵌入 Redis 优势:

减少网络开销: 不使用 Lua 的代码需要向 Redis 发送多次请求, 而脚本只需一次即可, 减少网络传输;
原子操作: Redis 将整个脚本作为一个原子执行, 无需担心并发, 也就无需事务;
复用: 脚本会永久保存 Redis 中, 其他客户端可继续使用.



Redis 使用单个 Lua 解释器去运行所有脚本，并且， Redis 也保证脚本会以原子性 (atomic) 的方式执
行：当某个脚本正在运行的时候，不会有其他脚本或 Redis 命令被执行。这和使用 MULTI / EXEC 包
围的事务很类似。在其他别的客户端看来，脚本的效果 (effect) 要么是不可见的 (not visible) ，要么就是
已完成的 (already completed) 。


redis 不存在回滚机制

使用:

1.在php的redis中使用lua

    $redis->eval()函数

    eval($lua,$data,$num);

    $lua 要执行的lua命令 :

    $data传进去的参数(必须是数组):

    $num表示第二个参数数组中 有几个是参数(数组其他剩下来的是附加参数) 

    其中 lua中使用参数用的是 KEYS[1]  KEYS[2]  使用附加参数是 ARGV[1] 

  例1:

  redis.call('set',KEYS[1],ARGV[1])

$lua = <<<eof
        local msg = 'hello, world';
        return msg;
eof;
$redis->eval($lua);

如：在lua脚本中set key
eval "redis.call('set',KEYS[1],KEYS[2],ARGV[1],ARGV[2])" 2 a b  aa bb



