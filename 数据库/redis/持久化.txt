Redis 有两种持久化的方式: 快照 (RDB文件) 和追加式文件 (AOF文件):

RDB 持久化方式会在一个特定的间隔保存那个时间点的一个数据快照.

AOF 持久化方式则会记录每一个服务器收到的写操作. 在服务启动时, 这些记录的操作会逐条执行从而重建出原来的数据.
写操作命令记录的格式跟 Redis 协议一致, 以追加的方式进行保存.

Redis 的持久化是可以禁用的, 就是说你可以让数据的生命周期只存在于服务器的运行时间里.
两种方式的持久化是可以同时存在的, 但是当 Redis 重启时, AOF文件会被优先用于重建数据.



RDB工作原理

Redis 调用 fork(), 产生一个子进程.
子进程把数据写到一个临时的 RDB 文件.
当子进程写完新的 RDB 文件后, 把旧的 RDB 文件替换掉.
RDB配置方式

默认情况下，是快照RDB的持久化方式，将内存中的数据以快照的方式写入二进制文件中，默认的文件名是dump.rdb



redis.conf默认配置：

save 900 1
save 300 10
save 60 10000
 配置含义：

 900秒内，如果超过1个key被修改，则发起快照保存

 300秒内，如果超过10个key被修改，则发起快照保存

 60秒内，如果1万个key被修改，则发起快照保存




AOF

RDB快照并不是很可靠. 如果你的电脑突然宕机了, 或者电源断了, 又或者不小心杀掉了进程, 那么最新的数据就会丢失.
而 AOF 文件则提供了一种更为可靠的持久化方式. 每当 Redis 接受到会修改数据集的命令时, 就会把命令追加到 AOF 文件里,
当你重启 Redis 时, AOF 里的命令会被重新执行一次, 重建数据.

启用 AOF
把配置项 appendonly 设为 yes:
appendonly yes
文件路径和名称

# 文件存放目录，与RDB共用。默认为当前工作目录。
dir ./

# 默认文件名为appendonly.aof
appendfilename "appendonly.aof"



在线上我们到底该怎么做? 我提供一些自己的实践经验.

如果 Redis 中的数据并不是特别敏感或者可以通过其它方式重写生成数据, 可以关闭持久化;
自己制定策略定期检查 Redis 的情况, 然后可以手动触发备份、重写数据;
单机如果部署多个实例, 要防止多个机器同时运行持久化、重写操作, 防止出现内存、CPU、IO资源竞争, 让持久化变为串行;
可以加入主从机器, 利用一台从机器进行备份处理, 其它机器正常响应客户端的命令;
RDB 持久化与 AOF 持久化可以同时存在, 配合使用.
