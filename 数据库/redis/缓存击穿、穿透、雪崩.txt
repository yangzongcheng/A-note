1、缓存穿透：key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会到数据源，从而可能压垮数据源。
比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。
解决：
a:
布隆过滤器
b:
所有数据源不存在的key都做空缓存，做好过期策略如5分钟后过期



2、缓存击穿：key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，
这个时候大并发的请求可能会瞬间把后端DB压垮。

1) key永不过期，被动更新key.




3、缓存雪崩：当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，也会给后端系统(比如DB)带来很大压力。
解决:
1）随机均匀设置失效时间
2）设置过期标志更新缓存
3）并发量不是特别多的时候，使用最多的解决方案是加锁排队


4、缓存预热
是一种机制, 就是系统上线后，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题。

5、缓存更新
是一种机制,怎么样保证缓存中的key是实时有效的,以及及时的更新数据资源
解决办法：
1）缓存服务器自带的缓存失效策略
2）自定义：定时去清理过期的缓存；当用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的话就去底层系统得到新数据并更新缓存。