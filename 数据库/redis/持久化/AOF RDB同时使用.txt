Redis 持久化 之 AOF 和 RDB 同时开启，Redis听谁的？
听AOF的，RDB与AOF同时开启 默认无脑加载AOF的配置文件
相同数据集，AOF文件要远大于RDB文件，恢复速度慢于RDB
AOF运行效率慢于RDB,但是同步策略效率好，不同步效率和RDB相同


混合持久化就是同时结合RDB持久化以及AOF持久化混合写入AOF文件。
这样做的好处是可以结合 rdb 和 aof 的优点:
快速加载同时避免丢失过多的数据

缺点:
aof 里面的 rdb 部分就是压缩格式不再是 aof 格式，可读性差。


开启混合持久化

4.0版本的混合持久化默认关闭的，通过aof-use-rdb-preamble配置参数控制，
yes则表示开启，no表示禁用，默认是禁用的，可通过config set修改。


混合持久化过程

了解了AOF持久化过程和RDB持久化过程以后，混合持久化过程就相对简单了。

混合持久化同样也是通过bgrewriteaof完成的，不同的是当开启混合持久化时，fork出的子进程先将共享的内存副本全量的以RDB方式写入aof文件，
然后在将重写缓冲区的增量命令以AOF方式写入到文件，写入完成后通知主进程更新统计信息，并将新的含有RDB格式和AOF格式的AOF文件替换旧的的AOF文件。
简单的说：新的AOF文件前半段是RDB格式的全量数据后半段是AOF格式的增量数据

数据恢复
当我们开启了混合持久化时，启动redis依然优先加载aof文件，aof文件加载可能有两种情况如下：

aof文件开头是rdb的格式, 先加载 rdb内容再加载剩余的 aof。

aof文件开头不是rdb的格式，直接以aof格式加载整个文件。


优点：
混合持久化结合了RDB持久化 和 AOF 持久化的优点, 由于绝大部分都是RDB格式，加载速度快，
同时结合AOF，增量的数据以AOF方式保存了，数据更少的丢失。

缺点：
兼容性差，一旦开启了混合持久化，在4.0之前版本都不识别该aof文件，同时由于前部分是RDB格式，阅读性较差


相关命令

aof文件检查

redis-check-aof /etc/redis/appendonly.aof

rdb文件检查

redis-check-rdb /etc/redis/dump.rdb

查看持久化信息

info Persistence

查看状态信息

info stats







