静态：直接开启指定数量的php-fpm进程，不再增加或者减少；

动态：开始的时候开启一定数量php-fpm进程，当请求变大的时候，动态的增加php-fpm进程数到上限，
     当空闲的时候自动释放空闲进程数到一个下限。


pm=dynamic  pm设置模式

pm.max_children = 100 #static(静态)模式下创建的子进程数或dynamic(动态)模式下同一时刻允许最大的php-fpm子进程数量。
pm.start_servers = 10 #动态方式下的起始php-fpm进程数量。
pm.min_spare_servers =80 #动态方式下服务器空闲时最小php-fpm进程数量。
pm.max_spare_servers = 16 #动态方式下服务器空闲时最大php-fpm进程数量。
pm.max_requests = 2000 #php-fpm子进程能处理的最大请求数。超过该值则自动重启该进程，这样达到了释放内存的目的了
该值设置合理可以避免内存溢出，能够及时的释放内存。可以根据自己服务器流量情况来设置
pm.process_idle_timeout = 10s
request_terminate_timeout = 600
该值也比较重要，默认是0，没有时间限制，也就是如果某个请求非常慢，那么该进程可能会因为一直没有响应导致进程僵死，设置适当的值可以在超时时间中止请求。


如果代码是 CPU 计算密集型的，pm.max_chindren 不能超过 CPU 的内核数。
如果不是，那么将 pm.max_chindren 的值大于 CPU 的内核数，是非常明智的。
国外技术大拿给出这么个公式：

在 N + 20% 和 M/m 之间。

N 是 CPU 内核数量。
M 是 PHP 能利用的内存数量。
m 是每个 PHP 进程平均使用的内存数量。
适用于 dynamic 方式。

static方式：M/(m * 1.2)

当然，还有一种保险的方式，来配置 max_children。适用于 static 方式。

先把 max_childnren 设置成一个比较大的值。
稳定运行一段时间后，观察 php-fpm 的 status 里的 max
active processes 是多少
然后把 max_children 配置比它大一些就可以了。
pm.max_requests：指的是每个子进程在处理了多少个请求数量之后就重启。
