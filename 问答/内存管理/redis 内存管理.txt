Redis是一个基于内存的键值数据库，其内存管理是非常重要的。本文内存管理的内容包括：过期键的懒性删除和过期删除以及内存溢出控制策略。

最大内存限制

Redis使用 maxmemory 参数限制最大可用内存，默认值为0，表示无限制。限制内存的目的主要 有：

用于缓存场景，当超出内存上限 maxmemory 时使用 LRU 等删除策略释放空间。
防止所用内存超过服务器物理内存。因为 Redis 默认情况下是会尽可能多使用服务器的内存，可能会出现服务器内存不足，导致 Redis 进程被杀死。



内存回收策略
Redis 回收内存大致有两个机制：一是删除到达过期时间的键值对象；二是当内存达到 maxmemory 时触发内存移除控制策略，
强制删除选择出来的键值对象。


删除过期键对象
Redis 所有的键都可以设置过期属性，内部保存在过期表中，键值表和过期表的结果如下图所示。当 Redis保存大量的键，
对每个键都进行精准的过期删除可能会导致消耗大量的 CPU，会阻塞 Redis 的主线程，拖累 Redis 的性能，
因此 Redis 采用惰性删除和定时任务删除机制实现过期键的内存回收。

1.查询redis内存相关的信息

登录redis的客户端，查看当前redis服务器的内存使用情况：
使用info memory 命令：
在这里插入图片描述
关键词解释
used_memory:已经使用了的内存大小，包括redis进程内部开销和你的cache的数据所占用的内存，单位byte。
used_memory_human:以可读格式返回的used_memory。
used_memory_rss:从操作系统角度显示的redis占用的物理内存。
used_memory_rss_human:以可读格式返回的used_memory。
used_memory_peak:内存的最大使用值，表示used_memory的峰值。
used_memory_peak_human:
used_memory_memory_lua: Lua引擎所消耗的内存大小
mem_fragmentation_ratio: used_memory_rss/used_memory的比值，表示内存碎片率
used_allocator:Redis所使用的内存分配器

其中，我们需要重点关注的指标有：used_memory_rss和used_memory以及它们的比值mem_fragmentation_ratio
特别是mem_fragmentation_ratio：
当mem_fragmentation_ratio > 1时，说明有很多内存碎片，即被使用了但是没有实际用于存储数据的内存。
对于一个存有大量数据的redis服务器，该值起码需要在1.5以下才算正常，否则需要思考一下如何做内存优化。

当mem_fragmentation_ratio < 1时，说明redis使用了虚拟内存，即redis把内存的数据交换到了硬盘上，
这种情况要格外关注。因为硬盘的读写速度要远远慢于内存，如果请求的数据大量存储在硬盘上，Redis的性能会变得很差，甚至僵死。



内存溢出控制策略

当Redis所用内存达到maxmemory上限时会触发相应的溢出控制策略。 具体策略受maxmemory-policy参数控制，Redis支持6种策略，如下所示：

1）noeviction：默认策略，不会删除任何数据，拒绝所有写入操作并返 回客户端错误信息（error）OOM command not allowed when used memory
，此 时Redis只响应读操作。
2）volatile-lru：根据LRU算法删除设置了超时属性（expire）的键，直 到腾出足够空间为止。如果没有可删除的键对象，回退到noeviction策略。
3）allkeys-lru：根据LRU算法删除键，不管数据有没有设置超时属性， 直到腾出足够空间为止。
4）allkeys-random：随机删除所有键，直到腾出足够空间为止。
5）volatile-random：随机删除过期键，直到腾出足够空间为止。
6）volatile-ttl：根据键值对象的ttl属性，删除最近将要过期数据。如果没有，回退到noeviction策略。


内存溢出控制策略可以使用 config set maxmemory-policy {policy} 语句进行动态配置。
Redis 提供了丰富的空间溢出控制策略，我们可以根据自身业务需要进行选择。

当设置 volatile-lru 策略时，保证具有过期属性的键可以根据 LRU 剔除，而未设置超时的键可以永久保留。
还可以采用allkeys-lru 策略把 Redis 变为纯缓存服务器使用。

当Redis因为内存溢出删除键时，可以通过执行 info stats 命令查看 evicted_keys 指标找出当前 Redis 服务器已剔除的键数量。

每次Redis执行命令时如果设置了maxmemory参数，都会尝试执行回收 内存操作。当Redis一直工作在内存溢出（used_memory>maxmemory）
的状态下且设置非 noeviction 策略时，会频繁地触发回收内存的操作，影响Redis 服务器的性能，这一点千万要引起注意。
