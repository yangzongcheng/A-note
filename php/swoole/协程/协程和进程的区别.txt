协程
协程可以理解为纯用户态的线程，其通过协作而不是抢占来进行切换。相对于进程或者线程，协程所有的操作都可以在用户态完成，创建和切换的消耗更低。

和进程的关系
一个进程内部可以运行多个线程，而每个线程又可以运行很多协程。
线程要负责对协程进行调度，保证每个协程都有机会得到执行。
当一个协程睡眠时，它要将线程的运行权让给其它的协程来运行，而不能持续霸占这个线程。
同一个线程内部最多只会有一个协程正在运行。


状态
协程可以简化为三个状态：运行态、就绪态和休眠态。
同一个线程中最多只会存在一个处于运行态的协程。
就绪态协程是指那些具备了运行能力但是还没有得到运行机会的协程，它们随时会被调度到运行态；
休眠态的协程还不具备运行能力，它们是在等待某些条件的发生，比如 IO 操作的完成、睡眠时间的结束等。


子协程的异常退出会将异常传播到主协程，直接会导致主协程也跟着挂掉。


应用
协程一般用 TCP/HTTP/RPC服务、消息推送系统、聊天系统等。使用协程，我们可以很方便的搭建一个支持高并发的TCP或HTTP服务端。

协程和线程的区别：
线程相对独立，有自己的上下文，切换受系统控制；而协程也相对独立，有自己的上下文，但是其切换由自己控制，由当前协程切换到其他协程由当前协程来控制

协程：交叉执行，发现阻塞切换协程


协程与进程
协程其实只是运行在一个进程中的函数,只是这个函数会被切换到下一个执行,可以这么说:
协程只是一串运行在进程中的任务代码,只是这些任务代码可以交叉运行 注意,协程并不是多任务并行,属于多任务串行,每个进程在一个时间只执行了一个任务


协程的作用域
由于协程就是进程中一串任务代码,所以它的全局变量,静态变量等变量都是共享的,包括了php的全局缓冲区.
所以,在开发之中,需要特别注意协程中的全局变量,静态变量,只要某一个协程内修改了,那将会影响全部的协程,在使用ob缓冲区函数拦截的时候,也得考虑是否会被其他协程的输出给污染.
用协程执行顺序中的代码2解释,当task1给$_GET['name']赋值为1时,task2读取$_GET['name']也会是1,task2将$_GET['name']赋值为2时,task3读取$_GET['name']也会是2


协程中的I/O连接
在协程中,要特别注意不能共用一个I/O连接,否则会造成数据异常.
例如多个协程公用一个mysql连接，可能会造成数据混淆，a协程的查询结果被b协程拿到
由于协程的交叉运行机制,各个协程的I/O连接都必须是独立的,所以我们需要在每个协程都创建一个连接,但由于mysql,redis的连接数有限,
以及连接的开启关闭需要消耗大量资源,所以我们可以使用连接池方案实现共用连接(只要保证每个连接每次只有一个协程在使用即可