IO:input/output(接收输出)
网络IO模型：常见的IO模型有阻塞、非阻塞、IO多路复用，异步。 

异步同步:
实际上同步与异步是针对应用程序与内核的交互而言的。同步过程中进程触发IO操作并等待或者轮询的去查看IO操作是否完成。
异步过程中进程触发IO操作以后，直接返回，做自己的事情，IO交给内核来处理，完成后内核通知进程IO完成。

阻塞与非阻塞:
简单理解为需要做一件事能不能立即得到返回应答，如果不能立即获得返回，需要等待，那就阻塞了，否则就可以理解为非阻塞。

1、阻塞
阻塞是指I/O操作需要彻底完成后才能返回用户空间
阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。

2、非阻塞
非阻塞是指I/O操作被调用后立即返回一个状态值，无需等I/O操作彻底完成
非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。

3、同步
同步是用户线程发起I/O请求后需要等待或者轮询内核I/O操作完成后才能继续执行
同步操作时，调用者需要等待被调用者返回结果，才会进行下一步操作

4、异步
异步是用户线程发起I/O请求后仍需要继续执行，当内核I/O操作完成后会通知用户线程，或者调用用户线程注册的回调函数
调用者不需要等待被调用者返回调用，即可进行下一步操作，被调用者通常依靠事件、回调等机制来通知调用者结果



同步阻塞方式：
    发送方发送请求之后一直等待响应。
    接收方处理请求时进行的IO操作如果不能马上等到返回结果，就一直等到返回结果后，才响应发送方，期间不能进行其他工作。

同步非阻塞方式：
	发送方发送请求之后，一直等待响应。
	接受方处理请求时进行的IO操作如果不能马上的得到结果，就立即返回，取做其他事情。
	但是由于没有得到请求处理结果，不响应发送方，发送方一直等待。
	当IO操作完成以后，将完成状态和结果通知接收方，接收方再响应发送方，发送方才进入下一次请求过程。（实际不应用）

异步阻塞方式：
	发送方向接收方请求后，不等待响应，可以继续其他工作。
	接收方处理请求时进行IO操作如果不能马上得到结果，就一直等到返回结果后，才响应发送方，期间不能进行其他操作。 （实际不应用）

异步非阻塞方式：
	发送方向接收方请求后，不等待响应，可以继续其他工作。
	接收方处理请求时进行IO操作如果不能马上得到结果，也不等待，而是马上返回去做其他事情。
	当IO操作完成以后，将完成状态和结果通知接收方，接收方再响应发送方。（效率最高）



举例：
异步非阻塞:
异步ajax对于浏览器来说是非阻塞，对于ajax本身就是异步
这就是异步非阻塞

同步阻塞:
服务端同步curl请求,才请求返回前当前代码无法向下执行，对于curl本身就是同步操作,对于服务端代码这是阻塞操作，
这就是同步阻塞

