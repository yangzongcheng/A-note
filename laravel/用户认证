  
  1、session 用户认证
  //登录 此种方式 只有 driver = session 的时候才能使用
  public function  login(Request $request){
        $credentials = $request->only('mobile', 'password');
//        driver =session 的时候才能使用这种
        if (Auth::guard('api-tokens')->attempt($credentials)) {
            // 通过认证..
            echo '通过认证';

        }else{
            echo '认证失败';
        }
    }


2、api认证

https://www.jb51.net/article/171893.htm

创建单独的中间件验证
Kernel.php
   protected $routeMiddleware = [
        'auth' => \App\Http\Middleware\Authenticate::class,
        'auth-api' => \App\Http\Middleware\ApiAuthenticate::class,//api token方式 登录验证
        'auth-api-jwt' => \App\Http\Middleware\ApiJwtAuthenticate::class,//api token方式 登录验证
    ];



ApiAuthenticate.php
<?php

namespace App\Http\Middleware;

use Illuminate\Support\Facades\Auth;
use Closure;
class ApiAuthenticate
{
    public function handle($request, Closure $next)
    {
        //对应  auth.php
        if (Auth::guard('api-tokens')->guest()) {
            return response()->json(['code' => 201,'msg' => 'token error']);
        }

//        dd(Auth::user());
        return $next($request);
    }
}




api.php  路由

//注意 某些地方 路由中间件必须在 分组使用
Route::group(['middleware' => ['auth-api']], function () {
    Route::get('/info', function () {
        //如果没有登录会跳转到 别名未 login 的路由
//    return $request->user();
        dd(Auth::user());
        echo 123;
    });

    Route::get('/token_login_out', function () {
        //如果没有登录会跳转到 别名未 login 的路由
//    return $request->user();
        Auth::logout();
    });



    token  模式：
    数据库 存一个 api_token 字段







